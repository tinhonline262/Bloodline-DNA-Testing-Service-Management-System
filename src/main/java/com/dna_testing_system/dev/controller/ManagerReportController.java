package com.dna_testing_system.dev.controller;

import com.dna_testing_system.dev.dto.request.NewReportRequest;
import com.dna_testing_system.dev.dto.request.UpdatingReportRequest;
import com.dna_testing_system.dev.dto.response.SystemReportResponse;
import com.dna_testing_system.dev.entity.User;
import com.dna_testing_system.dev.enums.ReportStatus;
import com.dna_testing_system.dev.enums.ReportType;
import com.dna_testing_system.dev.enums.RoleType;
import com.dna_testing_system.dev.exception.EntityNotFoundException;
import com.dna_testing_system.dev.exception.ErrorCode;
import com.dna_testing_system.dev.repository.UserRepository;
import com.dna_testing_system.dev.service.SystemReportService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/manager")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class ManagerReportController extends BaseController {

    SystemReportService systemReportService;
    UserRepository userRepository;

    @GetMapping("/reports")
    public String reports(@RequestParam(defaultValue = "0") int page,
                          @RequestParam(defaultValue = "20") int size,
                          @RequestParam(defaultValue = "all") String status,
                          @RequestParam(defaultValue = "all") String generatedByRole,
                          @RequestParam(defaultValue = "") String search,
                          @RequestParam(defaultValue = "createdAt") String sortBy,
                          @RequestParam(defaultValue = "desc") String sortDir,
                          Model model) {

        addUserProfileToModel(model);
        model.addAttribute("pageTitle", "Reports Management");

        try {
            // Get all reports
            List<SystemReportResponse> allReports = systemReportService.getAllSystemReports();

            // Get all available roles for filter dropdown
            RoleType[] allRoles = RoleType.values();
            model.addAttribute("allRoles", allRoles);

            // Filter reports
            List<SystemReportResponse> filteredReports = allReports.stream()
                    .filter(report -> {
                        // Filter by status
                        if (!"all".equals(status)) {
                            return report.getReportStatus().name().equalsIgnoreCase(status);
                        }
                        return true;
                    })
                    .filter(report -> {
                        // Filter by generated by user role
                        if (!"all".equals(generatedByRole)) {
                            return report.getGeneratedByUserRole() != null &&
                                    report.getGeneratedByUserRole().equalsIgnoreCase(generatedByRole);
                        }
                        return true;
                    })
                    .filter(report -> {
                        // Filter by search term
                        if (!search.isEmpty()) {
                            return report.getReportName().toLowerCase().contains(search.toLowerCase()) ||
                                    report.getReportCategory().toLowerCase().contains(search.toLowerCase()) ||
                                    report.getGeneratedByUserName().toLowerCase().contains(search.toLowerCase());
                        }
                        return true;
                    })
                    .sorted((r1, r2) -> {
                        int result = 0;
                        switch (sortBy) {
                            case "reportName":
                                result = r1.getReportName().compareTo(r2.getReportName());
                                break;
                            case "reportCategory":
                                result = r1.getReportCategory().compareTo(r2.getReportCategory());
                                break;
                            case "generatedByUserRole":
                                result = (r1.getGeneratedByUserRole() != null ? r1.getGeneratedByUserRole() : "")
                                        .compareTo(r2.getGeneratedByUserRole() != null ? r2.getGeneratedByUserRole() : "");
                                break;
                            case "reportStatus":
                                result = r1.getReportStatus().name().compareTo(r2.getReportStatus().name());
                                break;
                            case "reportType":
                                result = r1.getReportType().name().compareTo(r2.getReportType().name());
                                break;
                            case "createdAt":
                            default:
                                result = 0; // SystemReportResponse doesn't have createdAt, would need to be added
                                break;
                        }
                        return "desc".equals(sortDir) ? -result : result;
                    })
                    .collect(Collectors.toList());

            // Calculate report statistics
            ReportStats reportStats = calculateReportStatistics(allReports);
            model.addAttribute("reportStats", reportStats);

            // Pagination
            int totalReports = filteredReports.size();
            int startItem = page * size;
            int endItem = Math.min(startItem + size, totalReports);

            List<SystemReportResponse> pageReports = filteredReports.subList(startItem, endItem);

            // Create pagination info
            Page<SystemReportResponse> reportPage = new PageImpl<>(pageReports, PageRequest.of(page, size), totalReports);

            model.addAttribute("reports", pageReports);
            model.addAttribute("currentPage", page);
            model.addAttribute("totalPages", reportPage.getTotalPages());
            model.addAttribute("totalReports", totalReports);
            model.addAttribute("pageSize", size);
            model.addAttribute("selectedStatus", status);
            model.addAttribute("selectedGeneratedByRole", generatedByRole);
            model.addAttribute("searchQuery", search);
            model.addAttribute("sortBy", sortBy);
            model.addAttribute("sortDir", sortDir);

            // Add enum values for form dropdowns
            model.addAttribute("reportStatuses", ReportStatus.values());
            model.addAttribute("reportTypes", ReportType.values());

        } catch (Exception e) {
            log.error("Error loading reports: ", e);
            model.addAttribute("error", "Unable to load reports data");
        }

        return "manager/reports";
    }

    @PostMapping("/reports/{reportId}/update-status")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> updateReportStatus(@PathVariable Long reportId,
                                                                  @RequestParam String status,
                                                                  @RequestParam(required = false) String notes) {
        Map<String, Object> response = new HashMap<>();

        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            var existingUser = userRepository.findByUsername(auth.getName());
            String currentUserId = existingUser.orElseThrow(() -> new EntityNotFoundException(ErrorCode.USER_NOT_EXISTS)).getId();

            // Get current report
            SystemReportResponse currentReport = systemReportService.getSystemReportByReportId(reportId);

            // Create update request
            UpdatingReportRequest updateRequest = UpdatingReportRequest.builder()
                    .reportName(currentReport.getReportName())
                    .reportType(currentReport.getReportType())
                    .reportCategory(currentReport.getReportCategory())
                    .generatedByUserId(currentUserId)
                    .reportData(currentReport.getReportData())
                    .newReportStatus(status.toUpperCase())
                    .build();

            systemReportService.updateExistReport(updateRequest, reportId);

            response.put("success", true);
            response.put("message", "Report status updated successfully to " + status);

        } catch (Exception e) {
            log.error("Error updating report status: ", e);
            response.put("success", false);
            response.put("message", "Failed to update report status: " + e.getMessage());
        }

        return ResponseEntity.ok(response);
    }

    @GetMapping("/reports/new")
    public String newReportForm(Model model) {
        addUserProfileToModel(model);
        model.addAttribute("pageTitle", "Create New Report");
        model.addAttribute("reportTypes", ReportType.values());
        return "manager/reports-new";
    }

    @PostMapping("/reports/create")
    public String createReport(@ModelAttribute NewReportRequest reportRequest,
                               RedirectAttributes redirectAttributes) {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            var existingUser = userRepository.findByUsername(auth.getName());
            String currentUserId = existingUser.orElseThrow(() -> new EntityNotFoundException(ErrorCode.USER_NOT_EXISTS)).getId();

            User currentUser = userRepository.findById(currentUserId)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            reportRequest.setGeneratedByUser(currentUser);

            systemReportService.createNewReport(reportRequest);

            redirectAttributes.addFlashAttribute("successMessage", "Report created successfully!");
            return "redirect:/manager/reports";

        } catch (Exception e) {
            log.error("Error creating report: ", e);
            redirectAttributes.addFlashAttribute("errorMessage", "Failed to create report: " + e.getMessage());
            return "redirect:/manager/reports/new";
        }
    }

    @GetMapping("/reports/{reportId}/details")
    public String viewReportDetails(@PathVariable Long reportId, Model model) {
        addUserProfileToModel(model);
        model.addAttribute("pageTitle", "Report Details");

        try {
            SystemReportResponse report = systemReportService.getSystemReportByReportId(reportId);
            model.addAttribute("report", report);

            // Add breadcrumb navigation
            model.addAttribute("breadcrumbs", List.of(
                    Map.of("label", "Reports", "url", "/manager/reports"),
                    Map.of("label", "Report Details", "url", "")
            ));

        } catch (Exception e) {
            log.error("Error loading report details: ", e);
            model.addAttribute("error", "Unable to load report details");
        }

        return "manager/report-details";
    }

    private ReportStats calculateReportStatistics(List<SystemReportResponse> reports) {
        long totalReports = reports.size();
        long generatedReports = reports.stream().filter(r -> r.getReportStatus() == ReportStatus.GENERATED).count();
        long approvedReports = reports.stream().filter(r -> r.getReportStatus() == ReportStatus.APPROVED).count();
        long rejectedReports = reports.stream().filter(r -> r.getReportStatus() == ReportStatus.REJECTED).count();

        // Count by type
        Map<ReportType, Long> reportsByType = new HashMap<>();
        for (ReportType type : ReportType.values()) {
            long count = reports.stream().filter(r -> r.getReportType() == type).count();
            reportsByType.put(type, count);
        }

        return ReportStats.builder()
                .totalReports(totalReports)
                .generatedReports(generatedReports)
                .approvedReports(approvedReports)
                .rejectedReports(rejectedReports)
                .reportsByType(reportsByType)
                .build();
    }

    // Inner class for statistics
    @lombok.Data
    @lombok.Builder
    public static class ReportStats {
        private long totalReports;
        private long generatedReports;
        private long approvedReports;
        private long rejectedReports;
        private Map<ReportType, Long> reportsByType;
    }
}
